{"version":3,"sources":["file:///E:/2.workspace/cocos%20creator/slot/SlotMachine/assets/scripts/Global/AudioManager.ts"],"names":["_decorator","Component","AudioClip","assert","ccclass","property","AudioManager","type","instance","_instance","init","audioSource","_audioSource","playMusic","loop","playing","playSound","name","volumeScale","playOneShot","reelStart"],"mappings":";;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAAiBC,MAAAA,S,OAAAA,S;AAAwBC,MAAAA,M,OAAAA,M;;;;;;;OACxD;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;8BAGjBM,Y,WADZF,OAAO,CAAC,cAAD,C,UAOHC,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAAEL;AAAP,OAAD,C,sCAPb,MACaI,YADb,SACkCL,SADlC,CAC4C;AAAA;AAAA;;AAAA;AAAA;;AASrB,mBAARO,QAAQ,GAAI;AACnB,cAAI,KAAKC,SAAT,EAAoB;AAChB,mBAAO,KAAKA,SAAZ;AACH;;AAED,eAAKA,SAAL,GAAiB,IAAIH,YAAJ,EAAjB;AACA,iBAAO,KAAKG,SAAZ;AACH;;AAEDC,QAAAA,IAAI,CAAEC,WAAF,EAA4B;AAC5BL,UAAAA,YAAY,CAACM,YAAb,GAA4BD,WAA5B;AACH;;AAEDE,QAAAA,SAAS,CAAEC,IAAF,EAAiB;AACtB,cAAMH,WAAW,GAAGL,YAAY,CAACM,YAAjC;AACAT,UAAAA,MAAM,CAACQ,WAAD,EAAc,0BAAd,CAAN;AAEAA,UAAAA,WAAW,CAACG,IAAZ,GAAmBA,IAAnB;;AACA,cAAI,CAACH,WAAW,CAACI,OAAjB,EAA0B;AACtBJ,YAAAA,WAAW,CAACI,OAAZ;AACH;AACJ;;AAEDC,QAAAA,SAAS,CAAEC,IAAF,EAAgBC,WAAhB,EAA0C;AAAA,cAA1BA,WAA0B;AAA1BA,YAAAA,WAA0B,GAAJ,CAAI;AAAA;;AAC/C,cAAMP,WAAW,GAAGL,YAAY,CAACM,YAAjC;AACAT,UAAAA,MAAM,CAACQ,WAAD,EAAc,0BAAd,CAAN;AAEAA,UAAAA,WAAW,CAACQ,WAAZ,CAAwB,KAAKC,SAA7B,EAAwCF,WAAxC;AAEH;;AAtCuC,O,UAG5BT,S,mBACGG,Y;;;;;iBAGkB,I","sourcesContent":["import { _decorator, Component, Node, AudioClip, AudioSource, assert  } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('AudioManager')\nexport class AudioManager extends Component {\n\n\n\tprivate static _instance: AudioManager;\n    private static _audioSource?: AudioSource;\n\n    @property({type: AudioClip})\n \tpublic reelStart: AudioClip|null = null;\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new AudioManager();\n        return this._instance;\n    }\n\n    init (audioSource: AudioSource) {\n        AudioManager._audioSource = audioSource;\n    }\n\n    playMusic (loop: boolean) {\n        const audioSource = AudioManager._audioSource!\n        assert(audioSource, 'AudioManager not inited!');\n\n        audioSource.loop = loop;\n        if (!audioSource.playing) {\n            audioSource.playing();\n        }\n    }\n\n    playSound (name: string, volumeScale: number = 1 ) {\n        const audioSource = AudioManager._audioSource!\n        assert(audioSource, 'AudioManager not inited!');\n\n        audioSource.playOneShot(this.reelStart, volumeScale);\n\n    }\n}\n\n"]}