{"version":3,"sources":["file:///E:/2.workspace/cocos%20creator/slot/SlotMachine/assets/scripts/Global/AudioManager.ts"],"names":["audioManager","assert","clamp01","instance","_instance","init","audioSource","_audioSource","playMusic","loop","playing","playSound","name","volumeScale","playOneShot","audioClip","setMusicVolume","flag","volume"],"mappings":";;;kCACaA,Y;;;;;;;AADoBC,MAAAA,M,OAAAA,M;AAAcC,MAAAA,O,OAAAA,O;;;;;;;8BAClCF,Y,GAAN,MAAMA,YAAN,CAAmB;AAKH,mBAARG,QAAQ,GAAI;AACnB,cAAI,KAAKC,SAAT,EAAoB;AAChB,mBAAO,KAAKA,SAAZ;AACH;;AAED,eAAKA,SAAL,GAAiB,IAAIJ,YAAJ,EAAjB;AACA,iBAAO,KAAKI,SAAZ;AACH;AAED;;;AACAC,QAAAA,IAAI,CAAEC,WAAF,EAA4B;AAC5BN,UAAAA,YAAY,CAACO,YAAb,GAA4BD,WAA5B;AACH;AAEC;AACN;AACA;AACA;;;AACIE,QAAAA,SAAS,CAAEC,IAAF,EAAiB;AACtB,gBAAMH,WAAW,GAAGN,YAAY,CAACO,YAAjC;AACAN,UAAAA,MAAM,CAACK,WAAD,EAAc,0BAAd,CAAN;AAEAA,UAAAA,WAAW,CAACG,IAAZ,GAAmBA,IAAnB;;AACA,cAAI,CAACH,WAAW,CAACI,OAAjB,EAA0B;AACtBJ,YAAAA,WAAW,CAACI,OAAZ;AACH;AACJ;AAEA;AACL;AACA;AACA;AACA;;;AACIC,QAAAA,SAAS,CAAEC,IAAF,EAAgBC,WAAmB,GAAG,CAAtC,EAA0C;AAC/C,gBAAMP,WAAW,GAAGN,YAAY,CAACO,YAAjC;AACAN,UAAAA,MAAM,CAACK,WAAD,EAAc,0BAAd,CAAN,CAF+C,CAI/C;;AACAA,UAAAA,WAAW,CAACQ,WAAZ,CAAwBC,SAAxB,EAAmCF,WAAnC;AAEH,SA7CqB,CA8CtB;;;AACAG,QAAAA,cAAc,CAAEC,IAAF,EAAgB;AAC1B,gBAAMX,WAAW,GAAGN,YAAY,CAACO,YAAjC;AACAN,UAAAA,MAAM,CAACK,WAAD,EAAc,0BAAd,CAAN;AAEAW,UAAAA,IAAI,GAAGf,OAAO,CAACe,IAAD,CAAd;AACAX,UAAAA,WAAW,CAACY,MAAZ,GAAqBD,IAArB;AACH;;AArDqB,O;;AAAbjB,MAAAA,Y,CAEMI,S;AAFNJ,MAAAA,Y,CAGMO,Y","sourcesContent":["import { AudioClip, AudioSource, assert, warn, clamp01, resources } from \"cc\";\nexport class audioManager {\n\n    private static _instance: audioManager;\n    private static _audioSource?: AudioSource;\n\n    static get instance () {\n        if (this._instance) {\n            return this._instance;\n        }\n\n        this._instance = new audioManager();\n        return this._instance;\n    }\n\n    /**Manager initialization*/\n    init (audioSource: AudioSource) {\n        audioManager._audioSource = audioSource;\n    }\n\n      /**\n     * Play music\n     * @param {Boolean} loop Whether to loop\n     */\n    playMusic (loop: boolean) {\n        const audioSource = audioManager._audioSource!\n        assert(audioSource, 'AudioManager not inited!');\n\n        audioSource.loop = loop;\n        if (!audioSource.playing) {\n            audioSource.playing();\n        }\n    }\n\n     /**\n     * Play a sound effect\n     * @param {String} name The name of the sound effect\n     * @param {Number} volumeScale Playback volume multiplier\n     */\n    playSound (name: string, volumeScale: number = 1 ) {\n        const audioSource = audioManager._audioSource!\n        assert(audioSource, 'AudioManager not inited!');\n\n        // Note that the second parameter \"volumeScale\" is a multiple of the playback volume, the final playback volume is \"audioSource.volume * volumeScale\"\n        audioSource.playOneShot(audioClip, volumeScale);\n\n    }\n    // Set the music volume\n    setMusicVolume (flag: number) {\n        const audioSource = audioManager._audioSource!\n        assert(audioSource, 'AudioManager not inited!');\n\n        flag = clamp01(flag);\n        audioSource.volume = flag;\n    }\n\n}"]}