{"version":3,"sources":["file:///E:/2.workspace/cocos%20creator/slot/SlotMachine/assets/scripts/ReelController.ts"],"names":["_decorator","Component","Prefab","ccclass","property","ReelController","type","_firstDelay","_count","_finished","_speed","_playing","onLoad","start","i","len","node","children","length","a","Math","floor","random","b","posA","position","y","posB","setStartDelay","delay","setCount","count","onRunEvent","console","log","moveNextStatus","getPlaying","self","pos","cc","tween","to","v3","call","movingFinished","setPosition","rollingFinished","anim","getComponent","Animation","play"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Prefab } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ReelController')\nexport class ReelController extends Component {\n\n\n    @property({type: Prefab})\n    protected stops: Prefab[] = [];\n\n    private _firstDelay: number = 0;\n    private _count: number = 0;\n    private _finished: number = 0;\n    private _speed: number = 0.05;\n    private _playing: bool = false;\n\n    onLoad() {\n        \n\n    }\n\n    start() {\n\n        for (var i = 0; i < 1000; i ++) {\n\n            var len = this.node.children.length;\n            var a = Math.floor(Math.random() * 1000) % len;\n            var b = Math.floor(Math.random() * 1000) % len;\n\n            var posA = this.node.children[a].position.y;\n            var posB = this.node.children[b].position.y;\n\n            this.node.children[a].position.y = posB;\n            this.node.children[b].position.y = posA;\n        }\n\n    }\n\n    setStartDelay(delay) {\n        this._firstDelay = delay;\n    }\n\n    setCount(count) {\n        this._count = count;\n    }\n\n    onRunEvent() {\n    console.log(this._playing);\n        if(this._playing) {\n            return;\n        }\n        this._playing = true;\n        this.moveNextStatus();\n    }\n\n    getPlaying() {\n        return this._playing;\n    }\n\n    moveNextStatus() {\n\n        this._finished = 0;\n        var len = this.node.children.length;\n        var self = this;\n        for (var i = 0; i < len; i ++) {\n            var pos = this.node.children[i].position;\n\n                cc.tween(this.node.children[i])\n                    .delay(this._firstDelay)\n                    .to(this._speed, { position: cc.v3(0, pos.y-76, 0) })\n                    .call(() => {\n                        self.movingFinished();\n                    })\n                .start();\n\n        }\n\n        this._firstDelay = 0;\n    }\n\n    movingFinished() {\n\n        this._finished ++;\n        var len = this.node.children.length;\n        \n        if (this._finished < len) return ;\n        \n        for (var i = 0; i < len; i ++) {\n            var pos = this.node.children[i].position;\n            //console.log (pos);\n            if(pos.y < -10)  this.node.children[i].setPosition(cc.v3(0, len * 76 - 76, 0));\n        }\n\n        for (var i = 0; i < len; i ++) {\n            //console.log('---------');\n            //console.log (this.node.children[i].position);\n        }\n\n        this._count --;\n        if(this._count > 0) this.moveNextStatus();\n        else this.rollingFinished();\n    }\n\n    rollingFinished() {\n        var len = this.node.children.length;\n        for (var i = 0; i < len; i ++) {\n\n            var anim = this.node.children[i].getComponent(cc.Animation);\n            if  (anim != null) anim.play();\n        }\n        this._playing = false;\n    }\n\n}\n\n"]}